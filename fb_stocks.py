import pandas as pd
import numpy as np
from scipy.stats import norm 
import matplotlib.pyplot as plt

fb = pd.read_csv(r"C:\Users\user\Desktop\Projects\FB_data.csv") #or any damn path on your system

def LogRet(h): #Sets up the logarithmic column in the DF
    cur = np.log(h['close'])
    future = np.log(h['close']).shift(-1)  #shifts the column one step UPWARD  
    h['Logarithmic Return'] = future - cur
    h1 = h.dropna(how = 'any')    #returns a new data frame with dropped NAN
    global mu, sd, muy, sdy
    mu = h1['Logarithmic Return'].mean() #mean and standard deviation calcualted
    sd = h1['Logarithmic Return'].std(ddof = 1) #divides by n-1 instead of n
    muy = 220*mu
    sdy = (220**0.5)*sd            #for yearly parameters
    
def dist(h):
    graph = pd.DataFrame() #setting up x-y table for a graph
    graph['x'] = np.arange(h['Logarithmic Return'].min(), h['Logarithmic Return'].max(), 0.001)
    graph['y'] = norm.pdf(graph['x'], mu, sd) 
    plt.plot(graph['x'], graph['y'], color = 'red')
    h['Logarithmic Return'].hist()
    plt.show()
    
def predict(h, typ, chg):
    if typ == '1':
        r =  chg*0.01
        prob = 1 - norm.cdf(r, muy, sdy) #calculates prob up to point r
        print("Hey",n,"! The probability of the stock price rising by at least",chg,"% this year is",prob*100,"%!")
    elif typ == '2':
        r = chg*0.01
        prob = norm.cdf(-r, muy, sdy)
        print("Hey",n,"! The probability of the stock price falling by",chg,"% or more, this year is",prob*100,"%!")
        
def invest(h):
   fb['ma50'] = fb['close'].rolling(50).mean()  #Moving Average calculated over 50 days
   fb['ma200'] = fb['close'].rolling(200).mean()    
   fb['close'].plot(legend = True)
   fb['ma50'].plot(legend = True)
   fb['ma200'].plot(legend = True)
   
def epi():
    x = input("Do you wanna know the nitty-gritties of this project?\nPress 1 for Yes.\nPress 2 for No.")
    if x == '1':
        help(main)
    else:
        print("Thanks for visiting this project!")
        
## MAIN BLOCK ##
        
def main(name):
    #The introduction begins here. 
    """
    Welcome! This is a Stock Price Analysis Project in Python 3. 
    
    The packages that have been used include pandas, numpy, scipy and matplotlib. 
    1. pandas - as always - is used to generate the Dataframe we work with. 
    2. numpy is used to efficiently generate range of values for the graphs. 
    3. matplotlib.pyplot has been used for our visualization needs.
    4. scipy.stats is useful for generation probability and cumulative density functions. 
    
    First, we help the user find out the probability for stock price to rise/fall on a yearly basis for the company they opt. 
    This is done by creating a new column of Stock Prices that are shifted one step UP. By subtracting from this the column 
    of original Stock Prices, we get the PRICE DIFFERENCE. The dataframe is cleaned for null values by fb.dropna(how = 'any').
    
    To find the percentage difference of the future stock price (generated by shifting the array one step UP) and the original 
    Stock Price array, we simply find the natural logarithm of the price difference, as it is nearly mathematically equivalent
    to the % difference. 
    
    Upon the user's discretion, a frequency distribution of the Stock Prices are shown for greater clarity. Furthermore, we tell
    the users as to whether investment in said company's stocks would be good idea or not. 
    
    This is done by calculating MOVING AVERAGES (MA) over an x period of days; say 50 or 200 days. If the line for MA50 (fast singal) 
    lies above MA200, the trend may go upward for a while and it's probably a good idea to invest in the company!
    
    
    """
    LogRet(fb)
    print("Hello ", name,"!",end =' ')
    print("Welcome to the yearly FB stock price rise/fall predictor!")
    typ = input("What are you looking at?\nPress 1 for Rise\nPress 2 for Fall")
    chg = int(input("How much of a rise/fall are you looking for? For e.g.: 5%/10%/15%... and so on.\nEnter ONLY THE NUMBER WITHOUT PERCENTAGE SYMBOL:"))
    predict(fb, typ, chg)
    dist(fb)
    f = input("Would you like to know if investing in this company is a good idea?\nPress 1 for Yes\nPress 2 for No")
    if f == '1':
        invest(fb)
        print("If the MA50 line lies above the MA200 line, the Stock Price trend will remain positive for a while...\nIt's therefore probably a safe bet to invest here!")
    else:
        print("Thanks for visiting this project!")
   
n = input("Enter your name:")
main(n)
    

    
    

    
    
    
    
        
        

    
        
        






